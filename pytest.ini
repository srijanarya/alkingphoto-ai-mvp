[tool:pytest]
# Pytest configuration for TalkingPhoto AI MVP

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Output and reporting
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    --cov=.
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-report=term-missing
    --cov-fail-under=85
    --durations=10
    --disable-warnings

# Coverage configuration
[coverage:run]
source = .
omit = 
    */tests/*
    */venv/*
    */env/*
    */__pycache__/*
    */migrations/*
    */static/*
    */templates/*
    setup.py
    conftest.py
    run_streamlit.py
    test_*.py
    *_test.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

# Markers for test categorization
markers =
    unit: Unit tests - fast, isolated tests
    integration: Integration tests - test component interactions
    e2e: End-to-end tests - full workflow testing
    slow: Tests that take more than 5 seconds
    ai_provider: Tests that interact with AI services
    db: Tests that require database
    mock: Tests using mocked dependencies
    auth: Authentication and authorization tests
    credits: Credit system and payment tests
    files: File upload/download tests
    video: Video generation tests
    performance: Performance and load tests
    smoke: Basic smoke tests for critical functionality

# Test filtering examples:
# pytest -m "unit"                    # Run only unit tests
# pytest -m "not slow"                # Skip slow tests
# pytest -m "unit and not ai_provider" # Unit tests without AI providers
# pytest -k "test_auth"               # Run tests with 'auth' in name

# Asyncio configuration
asyncio_mode = auto

# Test timeout (in seconds)
timeout = 300

# Fixture scope optimization
# Most fixtures use function scope for isolation
# Some expensive fixtures use session scope

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Warnings filters
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    error::pytest.PytestUnraisableExceptionWarning

# Minimum Python version
minversion = 3.8

# Require test functions to be unique
addopts = --strict-markers

# Parallel testing (install pytest-xdist)
# addopts = -n auto

# Test database configuration
# Uses in-memory SQLite for speed
# Override with environment variables for integration tests